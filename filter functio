import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { response } from 'express';
import { ActivatedRoute, Router } from '@angular/router';
import { PasscrdataService } from './passcrdata.service';
import { environment } from '/IT_Portal/IT-Portal/IT-Portal.UI/src/environments/environment';

@Component({
  selector: 'app-change-request',
  templateUrl: './change-request.component.html',
  styleUrl: './change-request.component.css',
})
export class ChangeRequestComponent {

  selecttable: any;


  constructor(private http: HttpClient, private routeservice: PasscrdataService, private router: Router, private route: ActivatedRoute) {
    this.getviewcrdata();
    this.getplant();
    this.getclassification();
    this.getcategory();
    this.onload();
  }

  private apiurl = environment.apiurls

  toggleVisibility() {
    this.isVisible = !this.isVisible;
  }

  ngOnInit(): void {
   
    
   
  }
  parseAndSortResponse(response: any): any[] {
    let parsedResponse = response.map((item: any) => {
      return item;
    });
    parsedResponse.sort((a: any, b: any) => {
      if (a.itcrid < b.itcrid) {
        return 1;
      }
      if (a.itcrid > b.itcrid) {
        return -1;
      }
      return 0;
    });

    return parsedResponse;
  }

  viewchangerequest: any[] = [];
  
  getviewcrdata() {
    debugger
    const apiUrls = this.apiurl + '/ViewChange/GetAllchanges';
    const requestBody = {}; // You can include request body if needed
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        console.log(response);
        // Parse and sort the response before assigning it to viewchangerequest
        this.viewchangerequest = this.parseAndSortResponse(response);
        console.log(this.viewchangerequest);
      return this.viewchangerequest
      },
      (error) => {
        console.error("Get failed", error);
      }
    );
  }
  // Filter
  isVisible = true;
  filteredData: any[] = []; // Array to hold filtered data
  viewchangerequestFiltered: any; // Array to hold selected statuses

  selectedStatus: { [key: string]: boolean } = {
    'All':true,
    'New': false,
    'Submit': false,
    'Approved': false,
    'Rejected': false,
    'Implement': false,
    'Pending': false,
    'Release': false,
    'Completed': false,

    // Add other status values here
  };
  selectAll(event: any) {
    const isChecked = event.target.checked;
    const checkboxes = document.querySelectorAll('.cr_filter_checkbox');

    checkboxes.forEach((checkbox: any) => {
      checkbox.checked = isChecked;
      const label = checkbox.nextElementSibling;
      const labelText = label.textContent.trim();
      this.selectedStatus[labelText] = isChecked; 
    });

    console.log("selectedStatus:", this.selectedStatus);
  };

  filterData() {
    debugger
    const selectedStatusKeys = Object.keys(this.selectedStatus);

    if (this.selectedStatus['All']) {
      this.viewchangerequestFiltered = this.viewchangerequest;
    } else {
      const filteredKeys = selectedStatusKeys.filter(key => this.selectedStatus[key]);
      this.viewchangerequestFiltered = this.viewchangerequest.filter(item => {
        const trimmedStatus = item.status.trim();
        return filteredKeys.includes(trimmedStatus);
      });
    }
  }
  onload() {
    debugger
    this.selectedStatus = {
      'All': true
    }
    this.filterData()
    
  }
  
  updatecr(itcrid: number): void{
    this.router.navigate(['/updatecr', itcrid]);
  }

  plantcode: any[] = [];

  getplant() {
    
    const apiUrls = this.apiurl + '/Plantid'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.plantcode = response;
        console.log(this.plantcode)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  classifications: any[] = [];

  getclassification() {
    
    const apiUrls = this.apiurl + '/Classification'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.classifications = response;
        console.log(this.classifications)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  categorydata: any[] = [];

  getcategory() {
    const apiUrls = this.apiurl + '/Category'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.categorydata = response;
        console.log(this.categorydata)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  selectradio: any;

  selector(row:any) {
    this.selectradio = row;
    console.log(this.selectradio)
  }
  gotoapprove(tabId: string) {
    if (this.selectradio && this.selectradio.itcrid) {
      const itcrid = this.selectradio.itcrid;
      this.router.navigate([`/executive/${itcrid}/edit`], { fragment: tabId });
      setTimeout(() => {
        const tabButton = document.getElementById(tabId + '-tab');
        if (tabButton) {
          tabButton.click();
        }
      });
      this.approvepage();
    } else {
      console.error("No itcrid found in selectradio.");
    }
  }


  approvepage() {
    const report = {
      value:this.selectradio
    }
    this.routeservice.changerequestdata({ report })
  }

  updatepage() {
    const report = {
      value: this.selectradio
    }
    this.routeservice.changerequestdata({ report })
  }

  goToTab(tabId: string) {
    if (this.selectradio && this.selectradio.itcrid) {
      const itcrid = this.selectradio.itcrid;
      this.router.navigate([`/executive/${itcrid}/edit`], { fragment: tabId });
      setTimeout(() => {
        const tabButton = document.getElementById(tabId + '-tab');
        if (tabButton) {
          tabButton.click();
        }
      });
      this.excutepage();
    } else {
      console.error("No itcrid found in selectradio.");
    }
    
  }

  excutepage() {
    const report = {
      value: this.selectradio
    }
    this.routeservice.changerequestdata({ report })

  }
}


  filterData() {
    const selectedStatusKeys = Object.keys(this.selectedStatus);

    if (this.selectedStatus['All']) {
      this.viewchangerequestFiltered = [...this.viewchangerequest];
    } else {
      const filteredKeys = selectedStatusKeys.filter(key => this.selectedStatus[key]);
      this.viewchangerequestFiltered = this.viewchangerequest.filter(item => {
        const trimmedStatus = item.status.trim();
        return filteredKeys.includes(trimmedStatus);
      });
    }
  }





<div class="access-checkbox">
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-success">All</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-primary">New/Intiated</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-primary">Submitted</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-success">Approved</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-danger">Rejected</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-info">Implementation</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-warning">Pending</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label release_text">Released</label>
   <input class="cr_filter_checkbox" type="checkbox"><label class="cr_filter_label text-success">Closure</label>
   <button class="btn btn-rounded filter_button">Filter</button>
 </div>

   <table class="fl-table">
    <thead class="table-head">
      <tr class="border-bottom">
        <th>Select</th>
        <th>CR Code</th>
        <th>Requestor</th>
        <th>Description</th>
        <th>Status</th>
        <th>Type</th>
        <th>Classifications</th>
        <th>Start Date</th>
        <!--<th>Attachments</th>-->
        <th>Update</th>
        <th>Delete</th>
      </tr>
    </thead>
    <tbody>
      <tr class="tr-body" *ngFor="let pltdata of viewchangerequest">
        <td><input type="radio" (change)="selector(pltdata)" name="one" id="one" /></td>
        <td>{{pltdata.crcode}}</td>
        <td>{{pltdata.crowner}}</td>
        <td>{{pltdata.changeDesc}}</td>

        <td [ngSwitch]="pltdata.status.trim()">
          <span *ngSwitchCase="'New'"> <span style="color: blue;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Initiated'"> <span style="color: blue;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Submitted'"> <span style="color: blue;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Approved'"> <span style="color: green;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Closure'"> <span style="color: green;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Implementation'"> <span style="color: cyan;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Pending'"> <span style="color: orange;">{{ pltdata.status }}</span></span>
          <span *ngSwitchCase="'Released'"> <span style="color: gray;">{{ pltdata.status }}</span></span>
        </td>

        <td>{{pltdata.categoryName}}</td>
        <td>{{pltdata.classificationName}}</td>
        <td>{{pltdata.crdate | date:'shortDate' }}</td>
        <!--<td><i class="fa fa-download" aria-hidden="true"></i></td>-->
        <td>
          <a href="" (click)="updatepage()" routerLink="/executive/{{pltdata.itcrid}}/edit">
            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
          </a>
        </td>
        <td>
          <a href=""><i class="fa fa-trash" aria-hidden="true"></i></a>
        </td>
      </tr>
    </tbody>
  </table>
