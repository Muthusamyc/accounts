import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { response } from 'express';
import { ActivatedRoute, Router } from '@angular/router';
import { PasscrdataService } from './passcrdata.service';
import { environment } from '/IT_Portal/IT-Portal/IT-Portal.UI/src/environments/environment';

@Component({
  selector: 'app-change-request',
  templateUrl: './change-request.component.html',
  styleUrl: './change-request.component.css',
})
export class ChangeRequestComponent {

  selecttable: any;


  constructor(private http: HttpClient, private routeservice: PasscrdataService, private router: Router, private route: ActivatedRoute) {
    this.getviewcrdata();
    this.getplant();
    this.getclassification();
    this.getcategory();
    this.onload();
    setTimeout(() => {
      this.filterData()
    }, 5000);
  }

 

  private apiurl = environment.apiurls

  toggleVisibility() {
    this.isVisible = !this.isVisible;
  }

  /*ngOnInit(): void {
    this.filterData();
    console.log('mutthu')
  }*/
  parseAndSortResponse(response: any): any[] {
    let parsedResponse = response.map((item: any) => {
      return item;
    });
    parsedResponse.sort((a: any, b: any) => {
      if (a.itcrid < b.itcrid) {
        return 1;
      }
      if (a.itcrid > b.itcrid) {
        return -1;
      }
      return 0;
    });

    return parsedResponse;
  }

  viewchangerequest: any[] = [];
  
  getviewcrdata() {
    
    const apiUrls = this.apiurl + '/ViewChange/GetAllchanges';
    const requestBody = {}; // You can include request body if needed
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        console.log(response);
        // Parse and sort the response before assigning it to viewchangerequest
        this.viewchangerequest = this.parseAndSortResponse(response);
        console.log(this.viewchangerequest);
      return this.viewchangerequest
      },
      (error) => {
        console.error("Get failed", error);
      }
    );
  }
  // Filter
  isVisible = true;
  filteredData: any[] = []; // Array to hold filtered data
  viewchangerequestFiltered: any; // Array to hold selected statuses

  selectedStatus: { [key: string]: boolean } = {
    'All':false,
    'New': false,
    'Submit': false,
    'Approved': false,
    'Rejected': false,
    'Implement': false,
    'Pending': false,
    'Release': false,
    'Completed': false,

    // Add other status values here
  };
  selectAll(event: any) {
    const isChecked = event.target.checked;
    const checkboxes = document.querySelectorAll('.cr_filter_checkbox');

    checkboxes.forEach((checkbox: any) => {
      checkbox.checked = isChecked;
      const label = checkbox.nextElementSibling;
      const labelText = label.textContent.trim();
      this.selectedStatus[labelText] = isChecked; 
    });

    console.log("selectedStatus:", this.selectedStatus);
  };

  filterData() {
    console.log('helloooooo')
    const selectedStatusKeys = Object.keys(this.selectedStatus);
    if (this.selectedStatus['']) {
      this.viewchangerequestFiltered = this.viewchangerequest;
    }
    else if (this.selectedStatus['All']) {
      this.viewchangerequestFiltered = this.viewchangerequest;
    } else {
      const filteredKeys = selectedStatusKeys.filter(key => this.selectedStatus[key]);
      this.viewchangerequestFiltered = this.viewchangerequest.filter(item => {
        const trimmedStatus = item.status.trim();
        return filteredKeys.includes(trimmedStatus);
      });
    }
  }
  onload() {
    
    /*this.selectedStatus['All']=true
    this.filterData()*/
    
  }
  
  updatecr(itcrid: number): void{
    this.router.navigate(['/updatecr', itcrid]);
  }

  plantcode: any[] = [];

  getplant() {
    
    const apiUrls = this.apiurl + '/Plantid'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.plantcode = response;
        console.log(this.plantcode)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  classifications: any[] = [];

  getclassification() {
    
    const apiUrls = this.apiurl + '/Classification'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.classifications = response;
        console.log(this.classifications)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  categorydata: any[] = [];

  getcategory() {
    const apiUrls = this.apiurl + '/Category'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.categorydata = response;
        console.log(this.categorydata)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  selectradio: any;

  selector(row:any) {
    this.selectradio = row;
    console.log(this.selectradio)
  }
  gotoapprove(tabId: string) {
    if (this.selectradio && this.selectradio.itcrid) {
      const itcrid = this.selectradio.itcrid;
      this.router.navigate([`/executive/${itcrid}/edit`], { fragment: tabId });
      setTimeout(() => {
        const tabButton = document.getElementById(tabId + '-tab');
        if (tabButton) {
          tabButton.click();
        }
      });
      this.approvepage();
    } else {
      console.error("No itcrid found in selectradio.");
    }
  }


  approvepage() {
    const report = {
      value:this.selectradio
    }
    this.routeservice.changerequestdata({ report })
  }

  updatepage() {
    const report = {
      value: this.selectradio
    }
    this.routeservice.changerequestdata({ report })
  }

  goToTab(tabId: string) {
    if (this.selectradio && this.selectradio.itcrid) {
      const itcrid = this.selectradio.itcrid;
      this.router.navigate([`/executive/${itcrid}/edit`], { fragment: tabId });
      setTimeout(() => {
        const tabButton = document.getElementById(tabId + '-tab');
        if (tabButton) {
          tabButton.click();
        }
      });
      this.excutepage();
    } else {
      console.error("No itcrid found in selectradio.");
    }
    
  }

  excutepage() {
    const report = {
      value: this.selectradio
    }
    this.routeservice.changerequestdata({ report })

  }
}
<app-side-bar></app-side-bar>
<app-header></app-header>

<div class="container-home">
  <div class="text-center">
    <h1>Change Request</h1>
  </div>
  <!--<p *ngIf="!selectradio" style="color:red;">Please select the value</p>-->
  <div class="btn-approve">
    <button class="button-approve" [routerLink]="'/new-change'">New Change Request</button>&nbsp;
    <button class="button-approve" (click)="gotoapprove('profile')">Approve</button>&nbsp;
    <button class="button-approve" (click)="goToTab('contact')">Execute</button>&nbsp;
    <button class="button-approve" [routerLink]="'/change_request_report'">Reports</button>
  </div>
  <br />
  <br />
  <div class="card change_request_card_filter" *ngIf="isVisible">
    <div class="card-body card_body_filter">
      <div class="row filter_cr">
        <div class="col">
          <label>Plant</label><br />
          <select class="input-change">
            <option value="1" disabled selected>Select-Plant</option>
            <option *ngFor="let pltdata of plantcode " value="{{pltdata.id}}">{{pltdata.code}}</option>

          </select>
        </div>
        <div class="col">
          <label>Category</label><br />
          <select class="input-change">
            <option value="1" disabled selected>Select-Category</option>
            <option *ngFor="let value of categorydata " value="{{value.itcategoryId}}">{{value.categoryName}}</option>

          </select>
        </div>
        <div class="col">
          <label>Classifications</label><br />
          <select class="input-change">
            <option value="1" disabled selected>Select-Classifications</option>
            <option *ngFor="let cldata of classifications " value="{{cldata.itclassificationId}}">{{cldata.classificationName}}</option>

          </select>
        </div>
        <div class="col">
          <label>Stage</label><br />
          <select class="input-change">
            <option value="1" disabled selected>Select-Stage</option>
            <option value="Initiated">Initiated</option>
            <option value="Implementation">Implementation</option>
            <option value="Release">Release</option>
            <option value="Closure">Closure</option>
          </select>
        </div>
        <div class="col">
          <label>Start Date:</label><br />
          <input class="input-change cr_date"
                 type="date"
                 id="fromDate"
                 name="fromDate"
                 required />
        </div>
        <div class="col">
          <label>End Date:</label><br />
          <input class="input-change cr_date"
                 type="date"
                 id="toDate"
                 name="toDate"
                 required />
        </div>
      </div>
      <div class="access-checkbox">
        <input class="cr_filter_checkbox" type="checkbox" (change)="selectAll($event)" ><label class="cr_filter_label text-success">All</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['New']" value="New" ><label class="cr_filter_label text-primary">New</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Submitted']" value="Submitted"><label class="cr_filter_label text-primary">Submitted</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Approved']" value="Approved"><label class="cr_filter_label text-success">Approved</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Rejected']" value="Rejected"><label class="cr_filter_label text-danger">Rejected</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Implement']" value="Implement"><label class="cr_filter_label text-info">Implementation</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Pending']" value="Pending"><label class="cr_filter_label text-warning">Pending</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Release']" value="Release"><label class="cr_filter_label release_text">Released</label>
        <input class="cr_filter_checkbox" id="ChkStatus" type="checkbox" [(ngModel)]="selectedStatus['Completed']" value="Completed"><label class="cr_filter_label text-success">Closure</label>
        <button class="btn btn-rounded filter_button" (click)="filterData()">Filter</button>
      </div>
    </div>
  </div>
  <br />
  <div class="">
    <br />
  </div>
  <div>
    <div class="table-wrapper">
      <table class="fl-table">
        <thead class="table-head">
          <tr class="border-bottom">
            <th>Select</th>
            <th>CR Code</th>
            <th>Requestor</th>
            <th>Description</th>
            <th>Stage</th>
            <th>Status</th>
            <th>Type</th>
            <th>Classifications</th>
            <th>Start Date</th>
            <!--<th>Attachments</th>-->
            <th>Update</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody>
        
          <tr class="tr-body" *ngFor="let pltdata of viewchangerequestFiltered">
            <td><input type="radio" (change)="selector(pltdata)" name="one" id="one" /></td>
            <td>{{pltdata.crcode}}</td>
            <td>{{pltdata.crowner}}</td>
            <td>{{pltdata.changeDesc}}</td>
            <td>{{pltdata.stage}}</td>
            <td [ngSwitch]="pltdata.status.trim()">
              <span *ngSwitchCase="'New'"> <span style="color: #3c8dbc;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Rejected'"> <span style="color: Red;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Submitted'"> <span style="color: rgba(var(--bs-danger-rgb), var(--bs-text-opacity)) !important;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Approved'"> <span style="color: green;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Completed'"> <span style="color: green;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Implement'"> <span style="color: cyan;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Pending'"> <span style="color: rgba(var(--bs-warning-rgb), var(--bs-text-opacity)) !important;">{{ pltdata.status }}</span></span>
              <span *ngSwitchCase="'Release'"> <span style="color: rgb(154, 235, 73);">{{ pltdata.status }}</span></span>
            </td>

            <td>{{pltdata.categoryName}}</td>
            <td>{{pltdata.classificationName}}</td>
            <td>{{pltdata.crdate | date:'shortDate' }}</td>
            <!--<td><i class="fa fa-download" aria-hidden="true"></i></td>-->
            <td>
              <a href="" (click)="updatepage()" routerLink="/executive/{{pltdata.itcrid}}/edit">
                <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
              </a>
            </td>
            <td>
              <a href=""><i class="fa fa-trash" aria-hidden="true"></i></a>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <br />
  </div>
</div>
