<nav class="breadcrumbs">
  <div class="" id="nav-tab" role="tablist">
    <a class="active breadcrumbs__item is-active" id="nav-home-tab{{i}}" *ngFor="let i of counter(data)" data-bs-toggle="tab" [attr.data-bs-target]="'#nav-home' + i" role="tab" aria-controls="nav-home" aria-selected="true">Approver {{i}}</a>
  </div>
</nav>
<div class="tab-content" id="nav-tabContent">
  <div class="tab-pane fade show active" id="nav-home{{i}}" *ngFor="let i of counter(data)" role="tabpanel" aria-labelledby="nav-home-tab">
    <div>
      <div class="container-field-approve">
        RFC initiate Approved
        <div class="border-rfc-heading">
          <label>Approver Name</label>
          <input type="text" placeholder="" [(ngModel)]="this.data" />
          <div class="row mt-3">
            <div class="col">
              <label>Date</label>
              <input type="date" [(ngModel)]="approvers[i-1].date" />
            </div>
            <input [(ngModel)]="this.updatevalue[0].categoryId" hidden/>
            <input [(ngModel)]="this.updatevalue[0].classifcationId" hidden/>
            <div class="col">
              <label>Remark</label>
              <input type="text" [(ngModel)]="approvers[i-1].remark" />
            </div>
            <div class="col"></div>
          </div>
        </div>
      </div>
      <div>
        <div class="container-field-implement">
          <div>
            <label label-approve>Comments</label>
            <textarea class="textarea-implement" [(ngModel)]="approvers[i-1].comment"></textarea>
          </div>
          <div>
            <label class="label-approve">Attach Document</label>
            <input class="input-approve" type="File" placeholder="" [(ngModel)]="approvers[i-1].attach" />
          </div>
        </div>
        <div class="btn-sub-reset">
          <button class="btn-sub-approve" (click)="getData(i-1)">
            Approve
          </button>
          <button class="btn-sub-reject" type="submit" (click)="rejectbutton($event)">Reject</button>
          <button class="btn-sub" type="submit">Seek Clarification</button>
        </div>
      </div>
    </div>
  </div>
</div>



import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ActivatedRoute, Router } from '@angular/router';
import { json } from 'express';
import { PasscrdataService } from '../passcrdata.service';
import { environment } from '/IT_Portal/IT-Portal/IT-Portal.UI/src/environments/environment';

@Component({
  selector: 'app-approve',
  templateUrl: './approve.component.html',
  styleUrl: './approve.component.css'
})
export class ApproveComponent {
  showInitiator: boolean = false;
  showRiskQ: boolean = false;
  tabs: any[] = [];
  numberOfTabs: number = 1;
  plantData: any[] = [];
  status: any = '';
  approver: any = '';
  appdate: any = '';
  attach: any = '';
  remark: any = '';
  comment: any = '';
 
  selectthevalue: any = '';
  updatevalue: any;
  crid: any;
  constructor(private http: HttpClient, private routeservice: PasscrdataService, private router: Router, private route: ActivatedRoute) {
    this.routeservice.crdata.subscribe(data => {
      this.crid = data.report.value;
      this.itcrid = this.crid.itcrid;
    })
    console.log("crid", this.crid);
  }
  ngOnInit(): void {
    this.getidupdate();
    this.getupdatyevalue(this.itcrid);
    this.GetApprover();
  }
  private apiurl = environment.apiurls;

  toggleInitiatorFields() {
    this.showInitiator = !this.showInitiator;
  }

  toggleField() {
    this.showRiskQ = !this.showRiskQ;
  }

  toggleCollapsible(content: HTMLDivElement): void {
    content.style.display = (content.style.display === 'block') ? 'none' : 'block';
  }

  addMore() {
    this.plantData.push({
      selectPlant: '',
      controlNumber: '',
      controlDate: '',
      attachment: null
    });
  }

  toggleInitiatorField(index: number) {
    this.tabs[index].showInitiator = !this.tabs[index].showInitiator;
  }

  removeTab() {
    if (this.tabs.length > 0) {
      this.tabs.pop();
    }
  }

  update(index: number) {
    // Implement the update logic here
  }

  delete(index: number) {
    this.plantData.splice(index, 1);
  }

  handleFileInput(event: any, index: number) {
    const file = event.target.files[0];
    this.plantData[index].attachment = file;
  }
  itcrid: any;
  getidupdate() {
    debugger
    this.itcrid = this.route.snapshot.paramMap.get('id');
  }
  getupdatyevalue(itcrid: any) {
    debugger
    const apiUrls: any = this.apiurl + '/ChangeRequest/Getrequest';
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        console.log("Response from API:", response);

        // Log the itcrid value
        console.log("itcrid:", itcrid);

        this.updatevalue = response.filter((item: any) => item.itcrid.toString() === itcrid.toString());
        console.log("Update_value", this.updatevalue)
        /*if (this.itcrtd = this.updatevalue)*/

        console.log("Cater", this.updatevalue[0].categoryId)
      },
      (error: any) => {
        console.log('Post request failed', error);
      }
    );
  }

  approvervalue: any;

  GetApprover() {
   debugger
    const apiUrl = this.apiurl + '/GetApproval/GetApprover';
    const requestBody = {
      "level": 1,
      "stage": "N", 
      "categoryid": this.updatevalue[0].categoryId,
      "classificationid": this.updatevalue[0].classifcationId
  }
  const httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  };

  this.http.post(apiUrl, requestBody, httpOptions).subscribe(
    (response: any) => {
      console.log(response);
      this.approvervalue = response;
      if (this.approvervalue = 0) {
        this.data = 0
      }
      else {
        for (let i of this.approvervalue) {
          this.data=i.count
        }
      }
      console.log("Approver", this.approvervalue);
      alert(this.approvervalue);
    },
    (error: any) => {
      console.error('POST request failed', error);
    });
}



  data: any; // Or any value you want
  approvers: any[] = [];

/*  constructor() {
    this.initializeApprovers();
  }*/

  initializeApprovers() {
    for (let i = 0; i < this.data; i++) {
      this.approvers.push({
        name: '',
        date: '',
        remark: '',
        comment: '',
        attach: ''
      });
    }
  }

  counter(i: number) {
    return new Array(i);
  }

  getData(event: any) {
    const index = event.target.getAttribute('data-index');
    // Implement your logic to handle approval data
    console.log('Approve data for index', index);
  }

  rejectbutton(event: any) {
    const index = event.target.getAttribute('data-index');
    // Implement your logic to handle rejection
    console.log('Reject data for index', index);
  }
}
