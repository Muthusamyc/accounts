public async Task<IActionResult> UploadFiles([FromForm] string itcrid, [FromForm] List<IFormFile> files)
{
    try
    {
        if (files == null || files.Count == 0)
        {
            return BadRequest("No files selected for upload.");
        }

        if (string.IsNullOrEmpty(itcrid))
        {
            return BadRequest("ITCRID is required.");
        }

        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "ChangeRequest", itcrid);
        if (!Directory.Exists(uploadsFolder))
        {
            Directory.CreateDirectory(uploadsFolder);
        }

        foreach (var file in files)
        {
            if (file.Length > 0)
            {
                var fileName = file.FileName; // Use the original file name provided by the user
                var filePath = Path.Combine(uploadsFolder, fileName);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.CopyToAsync(stream);
                }
            }
        }

        return Ok(new { message = $"{files.Count} files uploaded successfully." });
    }
    catch (Exception ex)
    {
        return StatusCode(StatusCodes.Status500InternalServerError, $"Internal server error: {ex.Message}");
    }
}






addFiles(itcrid: any): void {
  if (!this.selectedFiles || this.selectedFiles.length === 0) {
    console.error('No files selected.');
    return;
  }

  const formData = new FormData();
  formData.append('itcrid', itcrid);

  for (let i = 0; i < this.selectedFiles.length; i++) {
    formData.append('files', this.selectedFiles[i], this.selectedFiles[i].name);
  }

  const apiUrl = this.apiurl + '/ChangeRequest';

  this.http.post(apiUrl, formData).subscribe(
    (response: any) => {
      console.log('Files uploaded successfully', response);
    },
    (error: any) => {
      console.error('Error uploading files', error);
    }
  );
}


<input type="file" (change)="onFileSelected($event)" multiple>


selectedFiles: FileList;

onFileSelected(event: any): void {
  this.selectedFiles = event.target.files;
}
