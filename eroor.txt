  sendemailfrom(response: any,status:any) {
    debugger
    const apiUrl = this.apiurl + '/Email'
    const CrRequest = response[0].crrequestedBy
    const to = response[0].crremail
    const cc = response[0].croemail
    const requestdate = response[0].crdate
    const changeDesc = response[0].changeDesc
    

    const output = `<br>Dear ${CrRequest}<br>,
    Thank you for ${status} the Change Request. Below are the details of the Change Request.
          Requestor Name: ${CrRequest}
          Requested Date: ${requestdate}
          Phase: RFC Submission
          Status: ${status}
          Change Description: ${changeDesc}
          Approver Level
          Approval 1: ${response[0].crapprover11N} (${response[0].crapprover11NempId}) - Pending
          Approval 2: ${response[0].crapprover12N} (${response[0].crapprover12NempId}) - Queued
          http://www.unnati.microlabs.co.in Click here to Log into Unnati and view your status.
          Regards,
          IT Team
          Micro Labs Ltd
          http://www.unnati.microlabs.co.in
          www.unnati.microlabs.co.in`;

    console.log(output);
    const requestBody = {
      "to": to, //Recipients: Requestor, Change Analyst
      "cc": cc,   //this.emailofreciver,
      "subject": `Unnati:IT Change Request:${response[0].itcrid} : Submitted for Approval`,
      "body": output

      //Recipients: Requestor, Change Analyst
    }

    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };
    this.http.post(apiUrl, requestBody, httpOptions).subscribe(
      (response: any) => {
        console.log(response);
      },
      (error: any) => {
        console.log('Post request failed', error);

      });
  }





using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding.Binders;
using System.Net;
using System.Net.Mail;

namespace IT_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmailController : ControllerBase
    {
        [HttpPost]
        public IActionResult SendEmail(EmailModel emailModel)
        {
            try
            {
                using (SmtpClient smtpClient = new SmtpClient("smtp-relay.gmail.com", 25))
                {
                    // No credentials needed for SMTP without authentication
                    smtpClient.UseDefaultCredentials = false;
                    smtpClient.EnableSsl = false;
                    System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                    NetworkCred.UserName = "noreply@microlabs.in";
                    NetworkCred.Password = "Password@1";
                    smtpClient.Credentials = NetworkCred;
                    MailMessage mailMessage = new MailMessage();
                    mailMessage.From = new MailAddress("noreply@microlabs.in");
                    mailMessage.To.Add(emailModel.To);
                    mailMessage.CC.Add(emailModel.CC);
                    mailMessage.Subject = emailModel.Subject;
                    mailMessage.Body = emailModel.Body;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls| SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                    smtpClient.Send(mailMessage);
                }
                return Ok("Email sent successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Failed to send email: {ex.Message}");
            }
        }
    }

    public class EmailModel
    {
        public string To { get; set; }
        public string CC { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }
}
