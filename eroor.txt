import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ActivatedRoute, Router } from '@angular/router';
import { environment } from '/IT_Portal/IT-Portal/IT-Portal.UI/src/environments/environment';
import { PasscrdataService } from '../../passcrdata.service';

interface DropdownItem {
  item_id: number;
  item_text: string;
}

@Component({
  selector: 'app-updatechangerequest',
  templateUrl: './updatechangerequest.component.html',
  styleUrl: './updatechangerequest.component.css'
})
export class UpdatechangerequestComponent {
  showInitiator: boolean = false;
  showRiskQ: boolean = false;
  supportid: any;
  supportname: any;
  today: any;
  crid: any = '';
  isApproved: any = '';
  isImplemented: any = '';
  isReleased: any = '';
  isSubmitted: any = '';
  getstatus: any = '';

  dropdownList: DropdownItem[] = [];
  dropdownSettings = {
    idField: 'item_id',
    textField: 'item_text',
  };
  constructor(private http: HttpClient, private routeservice:PasscrdataService , private route: ActivatedRoute, private router: Router) {
    this.routeservice.getsupportteam();
    this.supportid = this.routeservice.supporterID;
    this.supportname = this.routeservice.supporterName;

    const currentDate = new Date()
    this.today = currentDate.toISOString().slice(0, 10);

    this.routeservice.crdata.subscribe(data => {
      this.crid = data.report.value;
      this.getstatus = this.crid.status.trim();
      this.isApproved = this.crid.isApproved;
      this.isImplemented = this.crid.isImplemented;
      this.isReleased = this.crid.isReleased;
      this.isSubmitted = this.crid.isSubmitted;
    })
  }
  private apiurl = environment.apiurls;

  ngOnInit(): void {
    this.load();
    /*setTimeout(() => {
      
    }, 1000);*/
    setTimeout(() => {
      this.iniatorid();
      this.crrequestors();
      this.getsupportteamassign();
      this.getsupportteams();
      this.fetchAllItems();
      this.getCheckList();
    }, 500);
    
  }
  load() {
    this.fetchDropdownData()
    this.getclassification();
    this.getcategory();
    this.getnature();
    this.getcrdata();
    this.getcategorytype();
    this.getreference();
    this.getidupdate();
    this.getreferencetype();
    this.getupdatyevalue(this.itcrid);
    this.getpriority();
    
    this.fetchAllItems();
    this.getsupportteams();
    this.hidebutton();
  }

  fetchDropdownData(): void {
    const apiUrl = this.apiurl + '/Plantid';
    this.http.get<any[]>(apiUrl).subscribe(
      (data) => {
        this.dropdownList = data.map(item => ({
          item_id: item.id,
          item_text: item.code // Assuming your API response has 'id' and 'name' fields
        }));
      },
      (error) => {
        console.error('Error fetching dropdown data:', error);
      }
    );
  }

  selectedlocationNames: DropdownItem[] = [];
  impactedLocation: string = '';

  onSelectedItemsChange(): void {
    this.impactedLocation = this.selectedlocationNames.map((item: DropdownItem) => item.item_text).join(',');
  }

  buttonfunction: boolean = false;

  hidebutton() {
    if (this.getstatus == 'Draft' || this.getstatus == 'Seek Clarification' && this.ischangeanalyst == true ) {
      this.buttonfunction = true
    }
    else{
      this.buttonfunction = false
    }
    console.log("status in updatepage",this.getstatus)
  }
 
  toggleInitiatorFields() {
    this.showInitiator = !this.showInitiator;
  }

  toggleField() {
    this.showRiskQ = !this.showRiskQ;
  }

  isPopupVisible = false;

  togglePopup() {
    this.isPopupVisible = !this.isPopupVisible;
  }

  // g*p classification
  plantData: any[] = []; // Assuming you want to store multiple plant data entries

  addMore() {
    this.plantData.push({
      selectPlant: '',
      controlNumber: '',
      controlDate: '',
      attachment: null
    });
  }

  update(index: number) {
    // Implement the update logic here
  }

  delete(index: number) {
    this.plantData.splice(index, 1);
  }

  datetimefunction() {

    this.showRiskQ = true;
    this.updateEndDateMin();
  }
  updateEndDateMin() {
    const fromDate = new Date(this.downTimeFromDate);
    fromDate.setDate(fromDate.getDate() + 1);
    this.minEndDate = fromDate.toISOString().slice(0, 16); // Adjust as per your date format
  }



  handleFileInput(event: any, index: number) {
    // Assuming you want to handle file input for a specific row
    const file = event.target.files[0];
    this.plantData[index].attachment = file;
  }

  
  getidupdate() {
    this.itcrid = this.route.snapshot.paramMap.get('id');
  }

  itcrid: any = '';
  supportId: any = '';
  classificationId: any = '';
  categoryId: any = '';
  categorytypeid: any = '';
  crowner: any = '';
  crdate: any = '';
  changerequestedby: any = '';
  crrequestedDt: any = '';
  referenceid: any = '';
  referencetype: any = '';
  crinitiatedFor: any = '';
  changeType: any = '';
  natureOfChange: any = '';
  priorityType: any = '';
  plantId: any = '';
  gxpclassification: any = '';
  gxpplantId: any = '';
  changeControlNo: any = '';
  changeControlDt: any = '';
  changeControlAttach: any = '';
  changeDesc: any = '';
  reasonForChange: any = '';
  alternateConsidetation: any = '';
  impactNotDoing: any = '';
  triggeredBy: any = '';
  benefits: any = '';
  estimatedCost: any = '';
  estimatedCostCurr: any = '';
  estimatedEffort: any = '';
  estimatedEffortUnit: any = '';
  estimatedDateCompletion: any = '';
  rollbackPlan: any = '';
  backoutPlan: any = '';
  downTimeRequired: any = '';
  downTimeFromDate: string = ''; 
  downTimeToDate: string = '';
  approvedBy: any = '';
  approvedDt: any = '';
  createdBy: any = '';
  createdDt: any = '';
  modifiedBy: any = '';
  modifiedDt: any = '';
  businessImpact: any;
  impactedDept: any;
  imactedFunc: any;
  selectedCategory: any = '';
  changecntroldt: any = '';
  minEndDate: string = '';
  categorydata: any[] = [];

  getpriority() {
    const apiUrls = this.apiurl + '/Priority'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.priorityType = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }
  showRiskQ1: any;
  toggleField2() {
    this.showRiskQ1 = !this.showRiskQ1;
  }

  getcategory() {
    const apiUrls = this.apiurl + '/Category'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.categorydata = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  Natureofchange: any[] = [];
  parseToInt(value: string): number {
    return parseInt(value, 10); // Parse string to integer with base 10
  }
  getnature() {
  
    const apiUrls = this.apiurl + '/NatureofChange'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.Natureofchange = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  classifications: any[] = [];

  getclassification() {

    const apiUrls = this.apiurl + '/Classification';
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.classifications = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  plantcode: any[] = [];
  plant: any;
  getplant() {

    const apiUrls = this.apiurl + '/Plantid'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.plantcode = response.filter((item: any) => this.assignedplant.includes(item.id));
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  changerequest: any[] = [];

  getcrdata() {

    const apiUrls = this.apiurl + '/ChangeRequest/Getrequest'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.changerequest = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }
  
  categorytype: any[] = [];

  getcategorytype() {

    const apiUrls = this.apiurl + '/CategoryTyp'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.categorytype = response;
       
      },
      (error) => {
        console.error("Post failed", error)
      })
  }

  referenceapi: any[] = [];
  
  getreference() {

    const apiUrls = this.apiurl + '/Reference'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.referenceapi = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }
  refer: any;
  getreferencetype() {

    const apiUrls = this.apiurl + '/ReferenceType'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.refer = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  isapproved: any;
  updatevalue: any='';
  getupdatyevalue(itcrid: any) {

    const apiUrls: any = this.apiurl + '/ChangeRequest/Getrequest';
    const requestBody = {
    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls).subscribe(
      (response: any) => {
        this.updatevalue = response.filter((item: any) => item.itcrid.toString() === itcrid.toString());
        this.isapproved = this.updatevalue[0].isApproved
        const changerequstorname = this.updatevalue[0].crrequestedBy
        /*if (this.itcrtd = this.updatevalue)*/
        this.getsystemlandscape();
      },
      (error: any) => {
        console.log('Post request failed', error);
      }
    );
  }
  getsystemlandscape() {
    const apiUrl = this.apiurl + '/SystemLandscape/Getsystems';
    const requestBody = {
      "categroyId": this.updatevalue[0].categoryId,
      "supportId": this.updatevalue[0].supportId,
      "classificationId": this.updatevalue[0].classifcationId
    };
    this.http.post(apiUrl, requestBody).subscribe(
      (response: any) => {
        console.log("Sys", response);
        this.systemlandscape = response;
        this.selectCheckboxes();
      },
      (error: any) => {
        console.error('POST request failed', error);
      }
    );
  }

  selectCheckboxes() {
    for (const item of this.systemlandscape) {
      if (this.checkboxValues.includes(item.sysLandscape1)) {
        item.selected = true;
      }
    }
  }
  updatedvalue = [
    { crdate: new Date() },
    // Add more fields as needed
  ];

  formatDate(date: Date): string {
    return date.toISOString().slice(0, 10);
  }
  splitvalue: any = '';
  Updatecr(status:any) {
     
    const apiUrl = this.apiurl + "/ChangeRequest/InsertChangeRequest";
    const crinitiate = this.setiniatorname.split("-")[0];
    const changerequested = this.setcreniatorname.split("-")[0];

    const requestBody = { 
      "type": "U",
      "itcrid":this.itcrid,
      "supportId": 1,
      "classifcationId": this.updatevalue[0].classifcationId,
      "categoryId": this.updatevalue[0].categoryId,
      "crowner": this.updatevalue[0].crowner,
      "referenceId": this.updatevalue[0].referenceId,
      "referenceTyp": this.updatevalue[0].referenceTyp,
      "crdate": this.updatevalue[0].crdate,
      "crinitiatedFor": crinitiate,
      "status": status,
      "categoryTypeId": this.updatevalue[0].categoryTypeId,
      "crrequestedBy": changerequested,
      "crrequestedDt": this.updatevalue[0].crrequestedDt,
      "natureOfChange": this.updatevalue[0].natureOfChange,
      "priorityType": this.updatevalue[0].priorityType,
      "plantId": this.updatevalue[0].plantId,
      "gxpclassification": true,
      "gxpplantId": this.updatevalue[0].gxpplantId,
      "changeControlNo": this.updatevalue[0].changeControlNo,
      "changeControlDt": this.updatevalue[0].changeControlDt,
      "changeControlAttach": true,
      "changeDesc": this.updatevalue[0].changeDesc,
      "reasonForChange": this.updatevalue[0].reasonForChange,
      "alternateConsidetation": this.updatevalue[0].alternateConsidetation,
      "impactNotDoing": this.updatevalue[0].impactNotDoing,
      "triggeredBy": this.updatevalue[0].triggeredBy,
      "benefits": this.updatevalue[0].benefits,
      "estimatedCost": this.updatevalue[0].estimatedCost,
      "estimatedCostCurr": this.updatevalue[0].estimatedCostCurr,
      "estimatedEffort": this.updatevalue[0].estimatedEffort,
      "estimatedEffortUnit": this.updatevalue[0].estimatedEffortUnit,
      "estimatedDateCompletion": this.updatevalue[0].estimatedDateCompletion,
      "rollbackPlan": this.updatevalue[0].rollbackPlan,
      "backoutPlan": this.updatevalue[0].backoutPlan,
      "businessImpact": this.updatevalue[0].businessImpact,
      "downTimeRequired": true,
      "downTimeFromDate": this.updatevalue[0].downTimeFromDate,
      "downTimeToDate": this.updatevalue[0].downTimeToDate,
      "impactedLocation": this.updatevalue[0].impactedLocation,
      "impactedDept": this.updatevalue[0].impactedDept,
      "imactedFunc": this.updatevalue[0].imactedFunc,
      "isSubmitted": true,
      "isApproved": false,
      "isImplemented": false,
      "isReleased": false,
      "createdBy": this.supportid
    }
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };
    this.http.post(apiUrl, requestBody, httpOptions).subscribe(
      (response: any) => {
        console.log("jh", changerequested);
        alert("Submitted Successfully!",);
        
        if (status == "Submitted") {
          this.viewemail(status);
        }
        
        this.router.navigate(['/change-request']);
      },
      (error: any) => {
        console.log('Post request failed', error);
      }
    );
    
  }
  Cremailvalue: any[] = [];
  viewemail(status: any) {
    debugger
    const changerequested = this.setcreniatorname.split("-")[0];
    const changerequest = parseInt(changerequested);
    alert(changerequest);
    const apiUrl = this.apiurl + '/ViewCremail/GetViewCremail'
    const requestBody = {

    }
    this.http.get(apiUrl, requestBody).subscribe(
      (response: any) => {
        this.Cremailvalue = response.filter((item: any) => item.crrempid === changerequest);
        console.log(this.Cremailvalue,status);
      },
      (error: any) => {
        console.log('Post request failed', error);

      });
    setTimeout(() => {
      this.sendemailfrom(this.Cremailvalue, status)
    }, 500);
    
  }

  sendemailfrom(response: any,status:any) {
    debugger
    const apiUrl = this.apiurl + '/Email'
    const CrRequest = response[0].crrequestedBy
    const to = response[0].crremail
    const cc = response[0].croemail
    const requestdate = response[0].crdate
    const changeDesc = response[0].changeDesc
    

    const output = this.readHtmlFile('assets/email.html');
    console.log(output);
    const requestBody = {
      "to": to, //Recipients: Requestor, Change Analyst
      "cc": cc,   //this.emailofreciver,
      "subject": `Unnati:IT Change Request:${response[0].itcrid} : Submitted for Approval`,
      "body": output

      //Recipients: Requestor, Change Analyst
    }

    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };
    this.http.post(apiUrl, requestBody, httpOptions).subscribe(
      (response: any) => {
        console.log(response);
      },
      (error: any) => {
        console.log('Post request failed', error);

      });
  }

  readHtmlFile(file: string): string {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', file, false);
    xhr.send();
    if (xhr.status === 200) {
      return xhr.responseText;
    } else {
      console.error('Failed to read HTML file:', file);
      return ''; // or handle error accordingly
    }
  }
  inatiatorid: any;
  setinitator() {
    this.crinitiatedFor = this.supportid + '-' + this.supportpersonname
    //this.inatiatorid = this.supportid+'-'+

  }

  /*system landscape*/

  systemlandscape: any[] = [];
  checkboxValues: any[] = ['Development', 'Quality', 'Validation', 'Production', 'Live'];



  /*Search Filter*/
  dropdownItems: string[] = [];
  dropdownItemscr: string[] = [];
  selectedValue: string = '';
  selectedValuecr: string = '';
  supportteamname: string[] = [];
  supportnames: any;
  crownername: any;

  fetchAllItems() {
    const apiUrl = this.apiurl + '/SupportTeam';
    this.http.get<any[]>(apiUrl).subscribe(
      (response: any[]) => {
        this.crownername = response.filter(item => item.empId == this.updatevalue[0].crowner )
        this.supportnames = this.crownername[0].firstName + " " + this.crownername[0].middleName + " " + this.crownername[0].lastName;
        this.firstname = this.crownername[0].firstName;
        this.middlename = this.crownername[0].middleName;
        this.lastname = this.crownername[0].lastName;
        this.supportteamname = this.supportnames;
        if (this.firstname !== null && this.firstname !== undefined) {
          this.supportpersonname += this.firstname;
        }

        if (this.middlename !== null && this.middlename !== undefined) {
          // If the supportpersonname is not empty, add a space before concatenating middle name
          if (this.supportpersonname !== '') {
            this.supportpersonname += ' ';
          }
          this.supportpersonname += this.middlename;
        }

        if (this.lastname !== null && this.lastname !== undefined) {
          // If the supportpersonname is not empty, add a space before concatenating last name
          if (this.supportpersonname !== '') {
            this.supportpersonname += ' ';
          }
          this.supportpersonname += this.lastname;
        }

        // If all parts of the name are null or undefined, set supportpersonname to 'Unknown'
        if (this.supportpersonname === '') {
          this.supportpersonname = 'Unknown';
        }


        // If all parts of the name are null, set supportpersonname to 'Unknown'
        if (this.supportpersonname === '') {
          this.supportpersonname = 'Unknown';
        }
      },
      (error: any) => {
        console.error('GET request failed', error);
      }
    );
  }

  dropdownsupportteamid: any;
  filterItems() {
    const filter = this.setiniatorname.toUpperCase();
    this.dropdownItems = this.supportteamname.filter(item =>
      item.toUpperCase().includes(filter)

    );
    /* this.dropdownsupportteamid = this.supportteamid.filter();*/
    if (this.dropdownItems.length === 0 && filter !== '') {
      this.dropdownItems.push('No name found');
    }
    else if (filter === '') {
      this.dropdownItems.length = 0
    }

  }
  
  iniatorsid: any[] = [];
  setiniatorname: any;
  
  iniatorid() {
    const apiUrl = this.apiurl + '/SupportTeam';
    const requestBody = {
    }
    this.http.get(apiUrl, requestBody).subscribe(
      (response: any) => {
        this.iniatorsid = response.filter((item: any) => item.supportTeamId === this.updatevalue[0].crinitiatedFor || item.empId === this.updatevalue[0].crinitiatedFor);
        this.setiniatorname = this.iniatorsid[0].empId + "-" + this.iniatorsid[0].firstName + " " + this.iniatorsid[0].lastName
      },
      (error: any) => {
        console.error('POST request failed', error);
      });
    console.log(this.setiniatorname);
    
  }

  selectItem(item: string) {
    this.selectedValue = item;
    this.setiniatorname = item;
    this.dropdownItems = [];
  }

  crrequestedby: any[] = [];
  setcreniatorname: any;

  crrequestors() {
    const apiUrl = this.apiurl + '/SupportTeam';
    const requestBody = {
    }
    this.http.get(apiUrl, requestBody).subscribe(
      (response: any) => {
        this.crrequestedby = response.filter((item: any) => item.empId === this.updatevalue[0].crrequestedBy);
        this.setcreniatorname = this.crrequestedby[0].empId + "-" + this.crrequestedby[0].firstName + " " + this.crrequestedby[0].lastName
        
      },
      (error: any) => {
        console.error('POST request failed', error);
      });
  }

  filterItemscr() {
    const filter = this.setcreniatorname.toUpperCase();
    this.dropdownItemscr = this.supportteamname.filter(item =>
      item.toUpperCase().includes(filter)
    );
    if (this.dropdownItems.length === 0 && filter !== '') {
      this.dropdownItemscr.push('No name found');
    }
    else if (filter === '') {
      this.dropdownItemscr.length = 0
    }
  }

  selectItemcr(item: string) {
    this.selectedValuecr = item;
    this.setcreniatorname = item;
    this.dropdownItemscr = [];
  }

  //Login filters
  supportteams: any[] = [];
  getsupportid: any;
  supportpersonname = '';
  firstname: any;
  middlename: any;
  lastname: any;

  getsupportteams() {
    const apiUrls = this.apiurl + '/SupportTeam'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.supportteams = response.filter((row: any) => row.empId === parseInt(this.supportid.trim()));
        this.getsupportid = this.supportteams[0].supportTeamId
        /*this.firstname = this.supportteams[0].firstName
        this.middlename = this.supportteams[0].middleName
        this.lastname = this.supportteams[0].lastName
        this.supportpersonname = this.firstname + this.middlename + this.lastname*/
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
    this.getsupportteamassign()
  }

  supportteamassign: any[] = [];
  ischangeanalyst: any;
  isapprover: any;
  issupportegineer: any;
  assignedplant: any;
  mapplant: any;
  getsupportteamassign() {
     
    const apiUrls = this.apiurl + '/SupportteamAssigned'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.supportteamassign = response.filter((row: any) => row.supportTeamId === this.getsupportid);
        this.mapplant = this.supportteamassign.map((item: any) => item.plantId);
        this.assignedplant = Array.from(new Set(this.mapplant));
        this.isapprover = this.supportteamassign[0].isApprover
        this.issupportegineer = this.supportteamassign[0].isSupportEngineer
        this.ischangeanalyst = this.supportteamassign[0].isChangeAnalyst
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
    setTimeout(() => {
      this.getplant();
    }, 500);
    
  }

  checklist: any[] = [];
  getCheckList() {
    
    const apiUrls = this.apiurl + '/CheckList'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        // Filter checklist based on conditions
        this.checklist = response.filter((item: any) => item.plantId === this.updatevalue[0].plantId && item.supportId === 1 && item.classificationId === this.updatevalue[0].classifcationId && item.categoryId === this.updatevalue[0].categoryId);
        console.log('CheckList:', this.checklist)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }
}

The above is the ts im using to send emails from my angular project but its not rendering html elements and sending it to email. For example:
Below is the html element available in email.html
<div>
  <h1>Muthu Sir</h1>
</div>

but in email instead of getting 'Muthu Sir' only im getting:

<div>
  <h1>Muthu Sir</h1>
</div>
