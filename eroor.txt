[HttpGet("GetFile")]
public IActionResult GetFile(string itcrid, string fileName)
{
    try
    {
        if (string.IsNullOrEmpty(itcrid) || string.IsNullOrEmpty(fileName))
        {
            return BadRequest("ITCRID and fileName are required");
        }

        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "CrFollowup", itcrid, fileName);
        if (!System.IO.File.Exists(filePath))
        {
            return NotFound("File not found");
        }

        var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        var fileType = "application/octet-stream"; // You can determine the file type based on the file extension
        return File(fileStream, fileType, fileName);
    }
    catch (Exception ex)
    {
        return StatusCode(StatusCodes.Status500InternalServerError, $"Internal server error: {ex.Message}");
    }
}



viewFile(itcrid: string, fileName: string): void {
    const apiUrl = `${this.apiurl}/CRlession/GetFile?itcrid=${itcrid}&fileName=${fileName}`;

    this.http.get(apiUrl, { responseType: 'blob' }).subscribe(
        (response: Blob) => {
            const url = window.URL.createObjectURL(response);
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
        },
        (error: any) => {
            console.error('GET request failed', error);
        }
    );
}





getlessondat() {
    const apiUrls = this.apiurl + '/CRlession/GetCrLession'
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls, httpOptions).subscribe(
      (response: any) => {
        this.lessonval = response.filter((item: any) => item.itcrid === Number(this.crid.itcrid));
        console.log('cr release info', this.lessonval);

        if (this.lessonval.length > 0) {
          const firstItem = this.lessonval[0];
          this.lessonvalviewdt = firstItem.lessonDt;
          this.lessonvalviewComments = firstItem.lessons;
          this.lessonvalviewattachment = firstItem.attachment;
          const apimnfdate = this.datepipe.transform(this.lessonvalviewdt, 'dd-MMM-yyyy') || '';
          const [day, month, year] = apimnfdate.split('-');
          const dateObject = new Date(`${year}-${month}-${day}`);
          const formatDate = dateObject.toISOString().split('T')[0];
          this.lessonDt = formatDate;

          this.lessonval.forEach((item) => {
            this.lessonsArray.push({ text: `${item.lessons}` });
          });
          console.log('this.lessonsArray', this.lessonsArray);
          this.attachment = this.lessonvalviewattachment;
        }
      },
      (error) => {
        console.error('GET request failed', error);
      }
    );
}
